#!/usr/bin/python

"""
Custom topology for Mininet, generated by GraphML-Topo-to-Mininet-Network-Generator.
"""

import json
from mininet.net import Mininet
from mininet.node import CPULimitedHost, Host
from mininet.cli import CLI
from mininet.log import setLogLevel, info
from mininet.link import TCLink
from subprocess import call
import time

import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from lib.node import P4SimpleSwitch
from lib.json import write_nodes_json


def myNetwork():

    net = Mininet( topo=None,
                   build=False,
                #    ipBase='10.0.0j.0/12',
                   ipBase='10.0.0.0/24',
                #    autoSetMacs = True
                 )
    
    host_count = 5
    s1_ip_list = {}

    for i in range(1, host_count+1):
        ip_s1 = f'10.1.{i}.1/24'
        ip_host = f'10.1.{i}.2/24'

        s1_ip_list = s1_ip_list | {
            f"h{i}": {
                "ip": ip_s1,
                "bw": 1000.0
            }
        }

    s1_ip_list = s1_ip_list | {
        "lo": {
            "ip": "10.0.7.1/32"
        },
        "p4rt_s1": {
            "ip": "192.168.1.1/24"
        }
    }

    switch_ip_list = {"s1": s1_ip_list}

    file_path = "test_switch_ip_list.json"
    with open(file_path, mode="wt", encoding="utf-8") as f:
            json.dump(switch_ip_list, f, ensure_ascii=False, indent=4)

    os.chdir('..')


    s1 = net.addSwitch('s1', cls=P4SimpleSwitch)
    # s2 = net.addSwitch('s1', cls=P4SimpleSwitch)

    for i in range(1, host_count+1):
        host = net.addHost(f'h{i}', cls=Host, ip=None)
        local_link = {'bw':1000.0, 'delay':'0ms'}
        
        ip_host = f'10.1.{i}.2/24'
        net.addLink(s1, host, params2={'ip': ip_host}, cls=TCLink, **local_link)
        host.cmd(f"ip route add default dev {host.intfNames()[0]}")


    info( '[1;36m*** Add P4 controllers[0m\n')

    s1_Controller = s1.add_P4Controller(net, switch_ip_list[s1.name])
    
    info( '[1;36m*** Add Dummy and p4runtime links[0m\n')

    s1.reflect_switch_links()

    info( '\n[1;36m*** Starting network[0m\n')
    net.build()


    info( '[1;36m*** Run simple_switch_grpc[0m\n')

    s1.run_simple_switch_grpc()

    info( '\n[1;36m*** Write nodes.json [0m\n')
    write_nodes_json(net)

    info( '[1;36m*** Set vtysh config[0m\n')

    s1_Controller.set_frr_ospf_conf()

    info( '[1;36m*** Set P4 runtime[0m\n')

    s1_Controller.run_p4_runtime_shell()

    ####################################
    #### USER SIMULATION CODE HERE #####
    ####################################
    
    # Your automatic simulation code.
    
    ####################################

    CLI(net)

    net.stop()


if __name__ == '__main__':
    setLogLevel( 'info' )
    myNetwork()
